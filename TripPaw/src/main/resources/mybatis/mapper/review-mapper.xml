<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssdam.tripPaw.review.ReviewMapper">
	<resultMap id="reviewResultMap" type="Review">
		<id property="id" column="id" />
		<result property="content" column="content" />
		<result property="rating" column="rating" />
		<result property="targetId" column="target_id" />
		<result property="weatherCondition" column="weather_condition" />
		<result property="createdAt" column="created_at" />
		<result property="updatedAt" column="updated_at" />
		<association property="member"
			javaType="com.ssdam.tripPaw.domain.Member">
			<id property="id" column="member_id" />
		</association>
		<association property="reviewType"
			javaType="com.ssdam.tripPaw.domain.ReviewType">
			<id property="id" column="review_type_id" />
			<result property="targetType" column="target_type"/>
		</association>
	</resultMap>
	<resultMap id="reviewWithPlaceMap"
		type="com.ssdam.tripPaw.domain.Review">
		<id property="id" column="id" />
		<result property="content" column="content" />
		<result property="rating" column="rating" />
		<result property="createdAt" column="created_at" />
		<association property="place"
			javaType="com.ssdam.tripPaw.domain.Place">
			<result property="name" column="place_name" />
		</association>
	</resultMap>

	<insert id="insertReview" useGeneratedKeys="true"
		keyProperty="id">
		INSERT INTO review (member_id, content, rating,
		created_at, updated_at,
		review_type_id, target_id, weather_condition)
		VALUES (#{member.id}, #{content}, #{rating}, #{createdAt}, NOW(),
		#{reviewType.id}, #{targetId}, #{weatherCondition})
	</insert>

	<update id="updateReview">
		UPDATE review
		SET content=#{content},
		rating=#{rating}, updated_at = NOW()
		WHERE id = #{id} AND member_id =
		#{member.id}
	</update>

	<delete id="deleteReview">
		DELETE FROM review WHERE id=#{id} AND member_id =
		#{member.id}
	</delete>

	<delete id="deleteLikesByReviewId" parameterType="long">
		DELETE FROM
		member_likes_review WHERE review_id = #{reviewId}
	</delete>


	<!-- 단일 리뷰 조회 -->
	<select id="findById" resultMap="reviewResultMap">
		SELECT * FROM review WHERE id =
		#{id}
	</select>

	<!-- <select id="findByMemberId" resultMap="reviewResultMap"> SELECT * FROM 
		review WHERE member_id = #{memberId} </select> -->

	<!-- 전체 리뷰 목록 <select id="findAll" resultMap="reviewResultMap"> SELECT * 
		FROM review ORDER BY created_at DESC </select> -->

	<!-- <select id="findMemberById" parameterType="long" resultType="com.ssdam.tripPaw.domain.Member"> 
		SELECT * FROM member WHERE id = #{memberId} </select> -->

	<select id="findByMemberId" parameterType="long"
		resultType="com.ssdam.tripPaw.domain.Review">
		SELECT * FROM review WHERE member_id = #{memberId}
	</select>

	<select id="findMyReviewsByMemberId" parameterType="long"
		resultType="com.ssdam.tripPaw.review.MyReviewDto">
		SELECT
		r.id AS reviewId,
		r.target_id AS targetId,
		r.content,
		r.rating,
		r.weather_condition AS weatherCondition,
		DATE_FORMAT(r.created_at, '%Y.%m.%d') AS createdAt,
		rt.target_type AS reviewType,

		-- 제목
		CASE
		WHEN rt.target_type = 'PLAN' THEN tp.title
		WHEN rt.target_type = 'PLACE' THEN p.name
		ELSE NULL
		END AS tripTitle,

		-- PLAN 리뷰인 경우 여행 시작/종료일 가져오기
		CASE
		WHEN rt.target_type = 'PLAN' THEN (SELECT MIN(res.start_date) FROM reserv
		res WHERE res.trip_plan_id = tp.id)
		ELSE NULL
		END AS tripStartDate,

		CASE
		WHEN rt.target_type = 'PLAN' THEN (SELECT MAX(res.end_date) FROM reserv
		res WHERE res.trip_plan_id = tp.id)
		ELSE NULL
		END AS tripEndDate,

		-- 대표 이미지 1장
		(SELECT ri.image_url FROM review_image ri WHERE ri.review_id = r.id LIMIT 1)
		AS imageUrl,
		(SELECT COUNT(*) FROM review_image ri WHERE ri.review_id = r.id) AS
		imageCount,

		-- 장소 정보 (PLACE일 경우만 유효)
		p.name AS placeName,
		p.image_url AS placeImageUrl

		FROM review r
		JOIN review_type rt ON r.review_type_id = rt.id
		LEFT JOIN trip_plan tp ON (rt.target_type = 'PLAN' AND r.target_id =
		tp.id)
		LEFT JOIN place p ON (rt.target_type = 'PLACE' AND r.target_id = p.id)
		WHERE r.member_id = #{memberId}
	</select>


	<select id="findByPlaceIdWithPlaceName"
		resultMap="reviewWithPlaceMap" parameterType="long">
		SELECT r.*, p.name AS
		place_name
		FROM review r
		JOIN place p ON r.target_id = p.id
		WHERE
		r.review_type_id = 2 AND r.target_id = #{placeId}
		ORDER BY r.created_at
		DESC
	</select>

	<!-- 장소 리뷰 목록 -->
	<select id="findByPlaceId" resultMap="reviewResultMap"
		parameterType="long">
		SELECT * FROM review
		WHERE review_type_id = 2 AND
		target_id = #{placeId}
		ORDER BY created_at DESC
	</select>

	<!-- 여행플랜 리뷰 목록 -->
	<select id="findByPlanId" resultType="com.ssdam.tripPaw.review.ReviewOnePlanDto">
	    SELECT 
	        r.id,
	        r.content,
	        r.rating,
	        r.weather_condition AS weatherCondition,
	        DATE_FORMAT(r.created_at, '%Y-%m-%d') AS createdAt,
	        m.nickname AS memberNickname,
	        -- 콤마로 이어진 이미지 리스트
	        (SELECT GROUP_CONCAT(image_url) FROM review_image ri WHERE ri.review_id = r.id) AS imageUrls
	    FROM review r
	    JOIN member m ON r.member_id = m.id
	    WHERE r.review_type_id = 1
	      AND r.target_id = #{planId}
	    ORDER BY r.created_at DESC
	</select>

	<!-- 모든 여행플랜 리뷰 목록 -->
	<!-- <select id="findAllPlanReviews" resultMap="reviewResultMap"> SELECT 
		* FROM review WHERE review_type_id = 1 ORDER BY created_at DESC </select> -->
	<!-- 최신순 -->
	<select id="findAllPlanReviewsOrderByCreatedAtDesc"
		resultType="com.ssdam.tripPaw.review.ReviewPlanDto">
		SELECT
		r.id AS reviewId,
		r.content,
		r.rating,
		r.weather_condition AS weatherCondition,
		m.nickname AS memberNickname,
		tp.title AS planTitle,
		r.target_id AS tripPlanId,
		(
		SELECT
		ROUND(AVG(r2.rating), 1)
		FROM review r2
		WHERE r2.target_id = r.target_id
		AND r2.review_type_id = r.review_type_id
		) AS avgRating,
		GROUP_CONCAT(ri.image_url) AS imageUrls
		FROM review r
		JOIN member m ON
		r.member_id = m.id
		JOIN trip_plan tp ON r.target_id = tp.id
		LEFT JOIN
		review_image ri ON ri.review_id = r.id
		WHERE r.review_type_id = 1
		GROUP
		BY r.id
		ORDER BY r.created_at DESC
	</select>

	<!-- 평점 높은순 -->
	<select id="findAllPlanReviewsOrderByRatingDesc"
		resultType="com.ssdam.tripPaw.review.ReviewPlanDto">
		SELECT
		r.id AS reviewId,
		r.content,
		r.rating,
		r.weather_condition AS weatherCondition,
		m.nickname AS memberNickname,
		tp.title AS planTitle,
		r.target_id AS tripPlanId,
		(
		SELECT
		ROUND(AVG(r2.rating), 1)
		FROM review r2
		WHERE r2.target_id = r.target_id
		AND r2.review_type_id = r.review_type_id
		) AS avgRating,
		GROUP_CONCAT(ri.image_url) AS imageUrls
		FROM review r
		JOIN member m ON
		r.member_id = m.id
		JOIN trip_plan tp ON r.target_id = tp.id
		LEFT JOIN
		review_image ri ON ri.review_id = r.id
		WHERE r.review_type_id = 1
		GROUP
		BY r.id
		ORDER BY r.rating DESC
	</select>

	<!-- 평점 낮은순 -->
	<select id="findAllPlanReviewsOrderByRatingAsc"
		resultType="com.ssdam.tripPaw.review.ReviewPlanDto">
		SELECT
		r.id AS reviewId,
		r.content,
		r.rating,
		r.weather_condition AS weatherCondition,
		m.nickname AS memberNickname,
		tp.title AS planTitle,
		r.target_id AS tripPlanId,
		(
		SELECT
		ROUND(AVG(r2.rating), 1)
		FROM review r2
		WHERE r2.target_id = r.target_id
		AND r2.review_type_id = r.review_type_id
		) AS avgRating,
		GROUP_CONCAT(ri.image_url) AS imageUrls
		FROM review r
		JOIN member m ON
		r.member_id = m.id
		JOIN trip_plan tp ON r.target_id = tp.id
		LEFT JOIN
		review_image ri ON ri.review_id = r.id
		WHERE r.review_type_id = 1
		GROUP
		BY r.id
		ORDER BY r.rating ASC
	</select>

	<!-- 추천순: 좋아요 많은 순 -->
	<select id="findAllPlanReviewsOrderByLikesDesc"
		resultType="com.ssdam.tripPaw.review.ReviewPlanDto">
		SELECT
		r.id AS reviewId,
		r.content,
		r.rating,
		r.weather_condition AS weatherCondition,
		m.nickname AS memberNickname,
		tp.title AS planTitle,
		r.target_id AS tripPlanId,
		(
		SELECT
		ROUND(AVG(r2.rating), 1)
		FROM review r2
		WHERE r2.target_id = r.target_id
		AND r2.review_type_id = r.review_type_id
		) AS avgRating,
		GROUP_CONCAT(ri.image_url) AS imageUrls,
		COALESCE(ml.like_count, 0) AS
		likeCount
		FROM review r
		JOIN member m ON r.member_id = m.id
		JOIN
		trip_plan tp ON r.target_id = tp.id
		LEFT JOIN review_image ri ON
		ri.review_id = r.id
		LEFT JOIN (
		SELECT review_id, COUNT(*) AS like_count
		FROM member_likes_review
		GROUP BY review_id
		) ml ON r.id = ml.review_id
		WHERE r.review_type_id = 1
		GROUP BY r.id
		ORDER BY likeCount DESC
	</select>

	<insert id="likeReview" parameterType="map">
		INSERT IGNORE INTO
		member_likes_review (member_id, review_id)
		VALUES (#{memberId},
		#{reviewId})
	</insert>

	<delete id="unlikeReview" parameterType="map">
		DELETE FROM
		member_likes_review
		WHERE member_id = #{memberId} AND review_id =
		#{reviewId}
	</delete>

	<select id="countLikes" parameterType="long" resultType="int">
		SELECT
		COUNT(*) FROM member_likes_review
		WHERE review_id = #{reviewId}
	</select>

	<select id="hasLikedReview" parameterType="map"
		resultType="boolean">
		SELECT EXISTS (
		SELECT 1 FROM member_likes_review
		WHERE
		member_id = #{memberId} AND review_id = #{reviewId}
		)
	</select>
	<!-- 장소평균별점 -->
	<select id="getAvgRatingForPlace" parameterType="long"
		resultType="double">
		SELECT ROUND(AVG(rating), 1)
		FROM review
		WHERE review_type_id
		= 2 AND target_id = #{placeId}
	</select>

	<!-- 해당 장소의 평균 별점 -->
	<select id="getAverageRatingByPlaceId" parameterType="long"
		resultType="double">
		SELECT ROUND(AVG(rating), 1)
		FROM review
		WHERE review_type_id
		= 2 AND target_id = #{id}
	</select>

	<!-- 해당 장소의 리뷰 개수 -->
	<select id="getReviewCountByPlaceId" parameterType="long"
		resultType="int">
		SELECT COUNT(*)
		FROM review
		WHERE review_type_id = 2 AND
		target_id = #{id}
	</select>

	<!-- 추가 -->
	<!-- Top5 추천순 리뷰 조회 -->
	<select id="findTop5ByLikes" resultMap="reviewResultMap">
		SELECT
		r.*,
		COUNT(ml.member_id) AS likeCount
		FROM review r
		LEFT JOIN
		member_likes_review ml ON r.id = ml.review_id
		GROUP BY r.id
		ORDER BY
		likeCount DESC
		LIMIT 5
	</select>
	
	<!-- 추가 도장 추가 시 사용할 작성안한 리뷰 조회 -->
<resultMap id="tripPlanReviewDtoMap" type="com.ssdam.tripPaw.memberTripPlan.MemberTripPlanReviewDto">
  <result property="memberTripPlanId" column="member_trip_plan_id"/>
  <result property="titleOverride" column="title_override"/>
  <result property="startDate" column="start_date"/>
  <result property="endDate" column="end_date"/>
  <result property="imageUrl" column="image_url"/>
  <result property="status" column="status"/>
  <result property="countPeople" column="count_people"/>
  <result property="countPet" column="count_pet"/>
  <result property="publicVisible" column="is_public"/>
</resultMap>


<select id="findTripPlansWithoutReview" parameterType="long" resultMap="tripPlanReviewDtoMap">
    SELECT DISTINCT
      tp.id AS member_trip_plan_id,
      tp.title_override,
      tp.start_date,
      tp.end_date,
      tp.image_url,
      tp.status,
      tp.count_people,
      tp.count_pet,
      tp.is_public
    FROM member_trip_plan tp
    WHERE tp.id IN (
        SELECT r.member_trip_plan_id
        FROM reserv r
        WHERE r.member_id = #{memberId}
          AND r.delete_at IS NULL
    )
    AND NOT EXISTS (
        SELECT 1
        FROM review rv
        WHERE rv.review_type_id = 1
          AND rv.target_id = tp.id
          AND rv.member_id = #{memberId}
    )
</select>

<select id="findReviewsWithPlaceTypeByMemberId" resultType="com.ssdam.tripPaw.review.MyReviewDto"  parameterType="long">
  SELECT r.id AS review_id,
         r.content,
         r.rating,
         r.weather_condition,
         r.created_at,
         r.target_id,
         rt.target_type AS review_type,
         res.id AS reserv_id,
         tp.id AS member_trip_plan_id,
         tp.title_override AS trip_title,
         tp.start_date AS trip_start_date,
         tp.end_date AS trip_end_date,
         p.name AS place_name,
         p.image_url AS place_image_url,
         pt.id AS place_type_id,
         pt.name AS place_type_name
  FROM review r
  JOIN reserv res ON r.reserv_id = res.id
  JOIN member_trip_plan tp ON res.member_trip_plan_id = tp.id
  JOIN place p ON res.place_id = p.id
  JOIN place_type pt ON p.place_type_id = pt.id
  JOIN review_type rt ON r.review_type_id = rt.id
  WHERE r.member_id = #{memberId}
    AND NOT EXISTS (
    SELECT 1 FROM passport_seal ps WHERE ps.review_id = r.id
  )
</select>
	
</mapper>